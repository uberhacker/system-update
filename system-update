#!/bin/bash
OS=
if [ -f /etc/redhat-release ]; then
  OS="RedHat"
fi
if [ -f /etc/system-release ]; then
  OS="CentOS"
fi
if [ -f /etc/debian_version ]; then
  OS="Debian"
fi
if [ -z "$OS" ]; then
  echo "Operating system not supported."
  exit 1
fi
CONFIRM="-y"
if test $1; then
  if [[ $1 == "-s" || $1 == "--simulate" ]]; then
    CONFIRM="-n"
  else
    echo "Usage: $0 [-s | --simulate]"
    exit 1
  fi
fi
if [ $OS == "Debian" ]; then
  sudo apt-get update
  if [ $CONFIRM == "-y" ]; then
    sudo apt-get dist-upgrade -y
    sudo apt-get -f install
    sudo apt-get autoremove --purge -y
    sudo apt-get clean
  else
    sudo apt-get dist-upgrade --assume-no
  fi
else
  sudo yum update $CONFIRM
  sudo yum clean all
fi
if [ $CONFIRM == "-y" ]; then
  sudo chown -R $(whoami):$(whoami) /usr/local/bin
  COMPOSER=$(command -v composer 2> /dev/null)
  if [ ! -z "$COMPOSER" ]; then
    echo ""
    echo "Updating composer..."
    $COMPOSER self-update
    echo ""
    echo "Updating composer global projects..."
    $COMPOSER global update
    CGR=$(command -v cgr 2> /dev/null)
    if [ ! -z "$CGR" ]; then
      echo ""
      echo "Updating cgr projects..."
      $CGR update
    fi
    DRUSH=$(command -v drush-versions 2> /dev/null)
    if [ ! -z "$DRUSH" ]; then
      echo ""
      echo "Updating drush projects..."
      $DRUSH up
    fi
    $COMPOSER clearcache
  fi
  COMPOSE=$(command -v docker-compose 2> /dev/null)
  if [ ! -z "$COMPOSE" ]; then
    echo ""
    echo "Updating docker-compose..."
    INSTALLED_RELEASE=$(docker-compose --version | cut -d',' -f1 | cut -d' ' -f3)
    COMPOSE_NOW="compose-$(date +%Y%m%d%H%M)"
    git clone https://github.com/docker/compose.git $COMPOSE_NOW
    cd $COMPOSE_NOW
    git fetch --all
    LATEST_RELEASE=$(git describe --abbrev=0 --tags)
    #LATEST_RELEASE=$(git tag -l | grep ^1 | sort -Vr | head -1)
    #RC=$(echo $LATEST_RELEASE | grep -e '[a-zA-Z]')
    #if [ ! -z "$RC" ]; then
    #  STABLE_RELEASE=${LATEST_RELEASE/[\-a-zA-Z]*[0-9]*/}
    #  RELEASES=$(git tag -l | grep ^1 | sort -Vr | xargs)
    #  for R in $RELEASES; do
    #    if [ $R == $STABLE_RELEASE ]; then
    #      LATEST_RELEASE=$R
    #      break
    #    fi
    #  done
    #fi
    if [ "$INSTALLED_RELEASE" != "$LATEST_RELEASE" ]; then
      sudo curl -L https://github.com/docker/compose/releases/download/$LATEST_RELEASE/docker-compose-$(uname -s)-$(uname -m) -o $COMPOSE
      sudo chmod +x $COMPOSE
      echo "Updated docker-compose $INSTALLED_RELEASE to $LATEST_RELEASE."
    fi
    cd - > /dev/null
    rm -rf $COMPOSE_NOW/
  fi
  NVM_DIR="$HOME/.nvm"
  if [ -d $NVM_DIR ]; then
    echo ""
    echo "Updating nodejs..."
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    USED_OLD=$(nvm current)
    MAJOR=$(nvm current | cut -d'.' -f1)
    CURRENT="stable"
    if [ "$MAJOR" == "v4" ]; then
      CURRENT="lts/argon"
    fi
    if [ "$MAJOR" == "v6" ]; then
      CURRENT="lts/boron"
    fi
    if [ "$MAJOR" == "v8" ]; then
      CURRENT="lts/carbon"
    fi
    nvm install iojs
    nvm install --lts=argon
    nvm install --lts=boron
    nvm install --lts=carbon
    nvm install stable
    nvm use $CURRENT
    USED_NEW=$(nvm current)
    if [ $USED_OLD != $USED_NEW ]; then
      nvm uninstall $USED_OLD
    fi
  fi
  PIP=$(command -v pip 2> /dev/null)
  if [ ! -z "$PIP" ]; then
    if [ $PIP == $HOME/.local/bin/pip ]; then
      echo ""
      echo "Updating pip..."
      $PIP install -U pip --user
      AWS=$(command -v aws 2> /dev/null)
      if [ ! -z "$AWS" ]; then
        if [ $AWS == $HOME/.local/bin/aws ]; then
          echo ""
          echo "Updating aws-cli..."
          $PIP install -U awscli --user
        else
          echo ""
          echo "Unable to update aws since it is not installed for the local user."
        fi
      fi
    else
      echo ""
      echo "Unable to update pip since it is not installed for the local user."
    fi
  fi
  PLATFORM=$(command -v platform 2> /dev/null)
  if [ ! -z "$PLATFORM" ]; then
    echo ""
    echo "Updating platform..."
    $PLATFORM self-update --yes
  fi
  RVM=$(command -v rvm 2> /dev/null)
  if [ ! -z "$RVM" ]; then
    echo ""
    echo "Updating rvm..."
    curl -sSL https://get.rvm.io | bash -s stable
    $RVM reload
  fi
  VIM=$(command -v vim 2> /dev/null)
  if [ ! -z "$VIM" ]; then
    echo ""
    echo "Updating vim bundles..."
    cd ~/.vim && git submodule foreach git pull && cd -
  fi
  WP=$(command -v wp 2> /dev/null)
  if [ ! -z "$WP" ]; then
    echo ""
    echo "Updating wp-cli..."
    $WP cli update --yes
  fi
fi
