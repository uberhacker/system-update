#!/bin/bash
OS=
[ -f /etc/redhat-release ] && OS="RedHat"
[ -f /etc/system-release ] && OS="CentOS"
[ -f /etc/debian_version ] && OS="Debian"
if [ -z "$OS" ]; then
  echo "Operating system not supported."
  exit 1
fi
CONFIRM="-y"
if test $1; then
  if [[ $1 == "-d" || $1 == "--dry-run" ]]; then
    CONFIRM="-n"
  else
    echo "Usage: $0 [-d | --dry-run]"
    exit 1
  fi
fi
if [ $OS == "Debian" ]; then
  sudo apt-get update
  if [ $CONFIRM == "-y" ]; then
    sudo apt-get dist-upgrade -y --allow-unauthenticated
    sudo apt-get -f install
    sudo apt-get autoremove --purge -y
    sudo apt-get clean
  else
    sudo apt-get dist-upgrade --assume-no
    exit
  fi
else
  sudo yum update $CONFIRM
  if [ $CONFIRM == "-y" ]; then
    sudo yum autoremove -y
    sudo yum clean all
  fi
fi
if [ $CONFIRM == "-y" ]; then
  sudo chown -R $(whoami):$(whoami) /usr/local/bin
  COMPOSER=$(command -v composer 2> /dev/null)
  if [ -n "$COMPOSER" ]; then
    echo ""
    echo "Updating composer..."
    $COMPOSER self-update
    echo ""
    echo "Updating composer global projects..."
    $COMPOSER global update
    CGR=$(command -v cgr 2> /dev/null)
    if [ -n "$CGR" ]; then
      echo ""
      echo "Updating cgr projects..."
      $CGR update
    fi
    DRUSH=$(command -v drush-versions 2> /dev/null)
    if [ -n "$DRUSH" ]; then
      echo ""
      echo "Updating drush projects..."
      $DRUSH up
    fi
    $COMPOSER clearcache
  fi
  COMPOSE=$(command -v docker-compose 2> /dev/null)
  if [ -n "$COMPOSE" ]; then
    if [[ "$(readlink -f $COMPOSE)" != *"docker-desktop"* ]]; then
      echo ""
      echo "Updating docker-compose..."
      INSTALLED_RELEASE=$(docker-compose --version | cut -d',' -f1 | cut -d' ' -f3)
      COMPOSE_NOW="compose-$(date +%Y%m%d%H%M)"
      git clone https://github.com/docker/compose.git $COMPOSE_NOW
      cd $COMPOSE_NOW
      git fetch --all
      LATEST_RELEASE=$(git tag -l --sort=-version:refname | grep -v "[alpha|beta|docs|rc|v]" | head -1)
      if [[ $INSTALLED_RELEASE != $LATEST_RELEASE ]]; then
        sudo curl -L https://github.com/docker/compose/releases/download/$LATEST_RELEASE/docker-compose-$(uname -s)-$(uname -m) -o $COMPOSE
        sudo chmod +x $COMPOSE
        echo "Updated docker-compose $INSTALLED_RELEASE to $LATEST_RELEASE."
      fi
      cd -
      rm -rf $COMPOSE_NOW/
    fi
  fi
  NODEBREW=$(command -v nodebrew 2> /dev/null)
  if [ -n "$NODEBREW" ]; then
    echo ""
    echo "Updating node..."
    CURRENT=$($NODEBREW ls | grep ^current | cut -d':' -f2 | xargs)
    MAJOR=$(echo $CURRENT | cut -d'.' -f1)
    LATEST=$($NODEBREW ls-remote | grep $MAJOR. | xargs | awk 'NF>1{print $NF}')
    if [ $LATEST != $CURRENT ]; then
      NPM=$(command -v npm 2> /dev/null)
      GULP=$(command -v gulp 2> /dev/null)
      YARN=$(command -v yarn 2> /dev/null)
      $NODEBREW install $LATEST
      $NODEBREW use $LATEST
      $NODEBREW uninstall $CURRENT
      [ -n "$NPM" ] && npm i -g npm
      [ -n "$GULP" ] && npm i -g gulp
      [ -n "$YARN" ] && npm i -g yarn
    fi
  fi
  NVM_DIR="$HOME/.nvm"
  if [ -d $NVM_DIR ]; then
    echo ""
    echo "Updating node..."
    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    USED_OLD=$(nvm current)
    MAJOR=$(nvm current | cut -d'.' -f1)
    CURRENT="stable"
    if [ "$MAJOR" == "v4" ]; then
      CURRENT="lts/argon"
    fi
    if [ "$MAJOR" == "v6" ]; then
      CURRENT="lts/boron"
    fi
    if [ "$MAJOR" == "v8" ]; then
      CURRENT="lts/carbon"
    fi
    nvm install iojs
    nvm install --lts=argon
    nvm install --lts=boron
    nvm install --lts=carbon
    nvm install stable
    nvm use $CURRENT
    USED_NEW=$(nvm current)
    if [ $USED_OLD != $USED_NEW ]; then
      nvm uninstall $USED_OLD
    fi
  fi
  PIP=$(command -v pip 2> /dev/null)
  if [ -n "$PIP" ]; then
    if [ $PIP == $HOME/.local/bin/pip ]; then
      echo ""
      echo "Updating pip..."
      $PIP install -U pip --user
      AWS=$(command -v aws 2> /dev/null)
      if [ -n "$AWS" ]; then
        if [ $AWS == $HOME/.local/bin/aws ]; then
          echo ""
          echo "Updating aws-cli..."
          $PIP install -U awscli --user
        else
          echo ""
          echo "Unable to update aws since it is not installed for the local user."
        fi
      fi
    else
      echo ""
      echo "Unable to update pip since it is not installed for the local user."
    fi
  fi
  PLATFORM=$(command -v platform 2> /dev/null)
  if [ -n "$PLATFORM" ]; then
    echo ""
    echo "Updating platform..."
    $PLATFORM self-update --yes
  fi
  RVM=$(command -v rvm 2> /dev/null)
  if [ -n "$RVM" ]; then
    echo ""
    echo "Updating rvm..."
    curl -sSL https://get.rvm.io | bash -s stable
    $RVM reload
  fi
  VIM=$(command -v vim 2> /dev/null)
  if [[ -n "$VIM" && -d ~/.vim ]]; then
    echo ""
    echo "Updating vim bundles..."
    cd ~/.vim && git submodule foreach git pull && cd -
  fi
  WP=$(command -v wp 2> /dev/null)
  if [ -n "$WP" ]; then
    echo ""
    echo "Updating wp-cli..."
    $WP cli update --yes
  fi
fi
